package gov.nih.nci.iscs.oracle.grantreferal.factory;

import gov.nih.nci.iscs.oracle.grantreferal.exceptions.*;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import net.sf.hibernate.Session;
import net.sf.hibernate.SessionFactory;
import net.sf.hibernate.Transaction;

import gov.nih.nci.iscs.oracle.grantreferal.dataaccess.GrantReferalDao;
import org.springframework.transaction.support.TransactionSynchronizationManager;
import org.springframework.orm.hibernate.SessionHolder;
import org.springframework.context.ApplicationContext;
import net.sf.hibernate.Session;
import gov.nih.nci.iscs.oracle.grantreferal.context.ApplicationContextFactory;

public  class InitContext  {

	private static InitContext contextInstance = null;
    private ApplicationContext oApplicationContext = null;

    static Logger logger = LogManager.getLogger(InitContext.class);
    /**
     * InitContext encapsulates the implementation of the persistence mechanism
     *
     * @author Michelle Engermann
     * @version 1.0
     */


    /*
     * Constructor for the InitContext Class
     * Creates a singleton instance of the ApplicationContextFactory Class
     */

     public static ApplicationContext getApplicationContext() {
		 if (contextInstance == null) {
			 initContextInstance();
			 return contextInstance;
	     } else {
			 return contextInstance;
	     }
	 }

     private static void initContextInstance() {
		 contextInstance = new InitContext();
		 contextInstance.retrieveContext();
     }

     private void retrieveContext() {

        // get the application path from the properties or XML file
        String mApplicationPath = "gov/nih/nci/iscs/oracle/grantreferal/context/";
        String mApplicationContextPath = mApplicationPath + "applicationContext.xml";

        ApplicationContextFactory.init(mApplicationContextPath);

        try{
    	   oApplicationContext = (ApplicationContext) ApplicationContextFactory.getApplicationContext();
	    } catch (Exception ex) {
            logger.error(ex);
            throw new InfrastructureException(ex);
	    }
     }



     public SessionFactory getSessionFactory() {

		SessionFactory mSessionFactory = null;
        try{
    	   mSessionFactory = (SessionFactory) oApplicationContext.getBean("sessionFactory");

	    } catch (Exception ex) {
            logger.error(ex);
            return null;
	    }

	    return mSessionFactory;
     }
}
