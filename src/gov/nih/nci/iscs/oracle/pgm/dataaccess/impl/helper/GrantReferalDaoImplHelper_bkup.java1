package gov.nih.nci.iscs.oracle.pgm.dataaccess.impl.helper;

import java.util.List;
import java.util.*;
import gov.nih.nci.iscs.oracle.pgm.hibernate.*;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.SimpleDateFormat;
import javax.sql.DataSource;
import net.sf.hibernate.type.Type;
import net.sf.hibernate.HibernateException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.jdbc.object.MappingSqlQuery;
import org.springframework.jdbc.object.SqlUpdate;
import org.springframework.jdbc.core.SqlParameter;
import gov.nih.nci.iscs.oracle.pgm.dataaccess.GrantReferalDao;
import org.springframework.orm.hibernate.HibernateTemplate;
import org.springframework.orm.hibernate.SessionFactoryUtils;
import org.springframework.orm.hibernate.support.HibernateDaoSupport;
import gov.nih.nci.iscs.oracle.pgm.dataaccess.GrantReferalDao;
import gov.nih.nci.iscs.oracle.pgm.dataaccess.impl.helper.GrantReferalDaoImplHelper;
import org.springframework.orm.hibernate.HibernateInterceptor;
import gov.nih.nci.iscs.oracle.pgm.dataaccess.GrantReferalDao;
import net.sf.hibernate.Hibernate;
import net.sf.hibernate.Session;
import java.sql.Timestamp;
import gov.nih.nci.iscs.oracle.pgm.exceptions.*;

public class GrantReferalDaoImplHelper  {
    /**
     * GrantReferalDaoImplHelper contains helper routines that are common to the
     *   Grant Referal processes
     *
     * @author Michelle Engermann
     * @version 1.0
     */

   /** Logger for this class and subclasses */
    protected final Log logger = LogFactory.getLog(getClass());
    private Session session = null;
    private Connection connection = null;
    private String oReferalMessage = null;
    private ApplProcessStatusesT oApplProcessStatusesT;
    private CancerActivitiesT oCancerActivityT;
    private ApplCancerActivityPocsT oApplCancerActivityPocsT;
    private NciPersonOrgRolesT oNciPersonOrgRolesT;
    private Long oOrganizationCode;
    public static final String FAILURE_LITERAL = "FAILURE";

    Date oStartDate;

    NciApplElementsT oNciApplElementsT;
    Long oProgramDirectorOrgId;

    public GrantReferalDaoImplHelper(Session aSession) {
    /*
     * Assignes the Hibernate Session instance that will be used
     */
       session         = aSession;
	}

    public GrantReferalDaoImplHelper(Connection aConnection) {
    /*
     * Assignes the Hibernate Connection instance that will be used
     */
       connection         = aConnection;
	}

    public boolean acceptReferralSP(Long aApplId, Long aNpeId) throws CommandDaoException, SQLException  {
    /*
     * Call the accepr_referral stored procedure
     *
     * @return boolean - verification pass/faik
     * @param aApplId - the Appl id
     * @param aNpeId  - the Npe id
     */
       boolean mReturnVal = true;
       String mCurrRefCode = null;
       Connection mConnection = null;
       CallableStatement mCallableStatement = null;
       String mQueryString = "{call PD_PORTFOLIO_MGT_PKG.ACCEPT_REFERRAL(?,?,?,?)}";
       //Session session = SessionFactoryUtils.getSession(getSessionFactory(), true);
        try {

		      mCallableStatement = connection.prepareCall(mQueryString);
              mCallableStatement.setLong(1, aApplId.longValue());
              mCallableStatement.setLong(2, aNpeId.longValue());
              mCallableStatement.registerOutParameter(3, Types.VARCHAR);
              mCallableStatement.registerOutParameter(4, Types.VARCHAR);
              mCallableStatement.execute();
              oReferalMessage = mCallableStatement.getString(3) + " " + mCallableStatement.getString(4);
              oReferalMessage = oReferalMessage + " " + aApplId;
              if ((mCallableStatement.getString(3) == null) || !(mCallableStatement.getString(3).toUpperCase().equals(FAILURE_LITERAL))) {
                  mReturnVal = false;
              }

       } catch (SQLException ex) {
		    oReferalMessage = "Failed";
            throw new CommandDaoException( ex.toString() );
       } finally {
	           if (mCallableStatement != null) {
	               mCallableStatement.close();
	           }

	           if (connection != null) {
	               connection.commit();
	           }
	   			return mReturnVal;
	    }

    }

    public boolean rejectReferralSP(Long aApplId, Long aNpeId) throws SQLException   {
    /*
     * Call the reject_referral stored procedure
     *
     * @return boolean - verification pass/faik
     * @param aApplId - the Appl id
     * @param aNpeId  - the Npe id
     */
       boolean mReturnVal = true;
       String mCurrRefCode = null;
       Connection mConnection = null;
       CallableStatement mCallableStatement = null;
       String mQueryString = "{call PD_PORTFOLIO_MGT_PKG.REJECT_REFERRAL(?,?,?,?)}";
       //Session session = SessionFactoryUtils.getSession(getSessionFactory(), true);
        try {
		      mCallableStatement = connection.prepareCall(mQueryString);
              mCallableStatement.setLong(1, aApplId.longValue());
              mCallableStatement.setLong(2, aNpeId.longValue());
              mCallableStatement.registerOutParameter(3, Types.VARCHAR);
              mCallableStatement.registerOutParameter(4, Types.VARCHAR);
              mCallableStatement.execute();
              oReferalMessage = mCallableStatement.getString(3) + " " + mCallableStatement.getString(4);

              if ((mCallableStatement.getString(3) == null) || !(mCallableStatement.getString(3).toUpperCase().equals(FAILURE_LITERAL))) {
                  mReturnVal = false;
              }
       } catch (SQLException ex) {
		    oReferalMessage = "Failed";
            throw new CommandDaoException( ex.toString() );
       } finally {
	           if (mCallableStatement != null) {
	               mCallableStatement.close();
	           }

	           if (connection != null) {
	               connection.commit();
	           }
	   			return mReturnVal;
	    }

    }


    public boolean verifyApplForReferal(Long aApplId) {
    /*
     * Verify that the appl_id has PSS_CODE = 'REF' or 'REREF:
     *
     * @return boolean - verification pass/faik
     * @param aApplId - the Appl id
     */
       String mCurrRefCode = null;
       //Session session = SessionFactoryUtils.getSession(getSessionFactory(), true);
        try {
            List results = (List) session.find(
			           "from ApplProcessStatusesT appl where appl.nciApplElementsT.applApplId = ? and " +
			           "appl.endDate is null and " +
			           "appl.processStatusesT.code in ('REF','REF-D','REREF')", aApplId,  Hibernate.LONG);
          if (results == null) {
              throw new HibernateException("Invalid request ");
          }
          if (results.size() > 0) {
              oApplProcessStatusesT = (ApplProcessStatusesT) results.get(0);
              mCurrRefCode = oApplProcessStatusesT.getProcessStatusesT().getCode();
              // if current code is 'REF-D'; return the appropriate errror message:
		      //if (mCurrRefCode.equalsIgnoreCase("REF-D")) {
			  //    oReferalMessage = "This grant is in a dual referral status. It has to be released before any further action can be taken.";
			  //    return false;
	          //}
	      }

          // if current code is null; return the appropriate errror message:
		  //if (mCurrRefCode == null) {
		  //	  oReferalMessage = "This grant is not in a referral status. It has to be referred before any further action can be taken.";
		  //	  return false;
	      //  }

          return true;
       } catch (HibernateException ex) {
            throw SessionFactoryUtils.convertHibernateAccessException(ex);
       }

    }


    public boolean verifyOrganization(Long aApplId) {
    /*
     * Verify that the Referrals organization is in nci_organizations_t:
     *
     * @return boolean - verification pass/fail
     */
     String aBRANCH = "BRANCH";
     String aSRRRB  = "SRRRB";
     Object[] mQueryValues = new Object[] {aSRRRB, aBRANCH};
     Type[] mQueryTypes = new Type[] {Hibernate.STRING, Hibernate.STRING};

        try {
            List results = (List) session.find(
				"from NciOrganizationsT nciOrg where nciOrg.abbreviation = ?", aSRRRB, Hibernate.STRING);
          if (results == null) {
              throw new HibernateException("Invalid request ");
          }
          NciOrganizationsT mNciOrganizationsT = null;
          if (results.size() > 0) {
              mNciOrganizationsT = (NciOrganizationsT) results.get(0);
              oProgramDirectorOrgId = new Long(mNciOrganizationsT.getId());
	      }

          // if current organization code is null; return the appropriate errror message:
		  //if (oProgramDirectorOrgId == null) {
		  //	  oReferalMessage = "The action was cancelled.  Please contact your System Administrator.";
		  //	  oReferalMessage = oReferalMessage + " Referrals organization is missing from nci_organizations_t.";
		  //	  return false;
	      //}

          return true;
       } catch (HibernateException ex) {
            throw SessionFactoryUtils.convertHibernateAccessException(ex);
       }

    }

    public boolean verifyApplForAcceptance(Long aApplId) {
    /*
     * Verify that appl_id qualifies for acceptance:
     *
     * @return boolean - verification pass/fail
     * @param aApplId - the Appl id
     */
       String mLegacySourceFile = null;
       NciPdQueryVw mNciPdQueryVw = null;
       //Session session = SessionFactoryUtils.getSession(getSessionFactory(), true);
       try {
          List results = (List) session.find(
			  "from NciPdQueryVw pdQuery where pdQuery.applId = ?", aApplId,  Hibernate.LONG);
          if (results == null) {
              throw new HibernateException("Invalid request ");
          }
          if (results.size() > 0) {
              mNciPdQueryVw = (NciPdQueryVw) results.get(0);
              mLegacySourceFile = mNciPdQueryVw.getLegacySourceFile();

              //if LEGACY_SOURCE_FILE is not any of ('OPEN','PEND','NEWG'); return the following error message:
              //if (mLegacySourceFile.equalsIgnoreCase ("OPEN") ||
              //    mLegacySourceFile.equalsIgnoreCase ("PEND") ||
              //    mLegacySourceFile.equalsIgnoreCase ("NEWG")) {
			//	  oReferalMessage = "Grant does not qualify for acceptance. LEGACY_SOURCE_FILE must be IN (OPEN,PEND,NEWG).";
			//	  return false;
		      //}
	     }
         return true;


       } catch (HibernateException ex) {
            throw SessionFactoryUtils.convertHibernateAccessException(ex);
       }
    }

     public boolean verifyCancerActivity(Long aApplId, Long aNpeId) {
     /*
      * Verify the the appl_id has a Cancer_activity assigned to it
      *
      * @return boolean - verification pass/fail
      * @param aApplId - the Appl id
      */

        String mCancerActivityCode = null;
        SimpleDateFormat mFormatter = new SimpleDateFormat("dd MMMMM yyyy");
        Date mCurrDate = new Date();
        boolean mPdMatched = true;


       try {

		   List results = getApplCancerActivities(aApplId, mCurrDate);
		   // find all applCancerActivities for this applId
		   System.out.println("**** passed getApplCancerActivities *** " + results);
           if (results.size() > 0) {
			   //get the cancer activity record
               ApplCancerActivitiesT mApplCancerActivitiesT = (ApplCancerActivitiesT) results.get(0);
               oCancerActivityT  = mApplCancerActivitiesT.getCancerActivitiesT();
               mCancerActivityCode = oCancerActivityT.getCode();
              //If cancer_activity_code is null; return the following message:
               //if (mCancerActivityCode == null)  {
				//  oReferalMessage = "Grant could not be accepted. The grant is not assigned to a cancer activity at the start date " +  mFormatter.format(mCurrDate);
				//  return false;
        	   //}

               // get the Cancer Activitity POC
		       Set mCancerActivityPocsTSet = oCancerActivityT.getCancerActivityPocsTs();
		       Hibernate.initialize(mCancerActivityPocsTSet);
               System.out.println("**** passed step 1 ****");
               //Verify that new PD is assigned to current cancer activity:
		       Set mCancerActivityPdsTSet = oCancerActivityT.getCancerActivityPdsTs();
		       Hibernate.initialize(mCancerActivityPdsTSet);
               System.out.println("**** passed step 2 ****");

		       // get the right ApplCancerActivityPocsT
		       CancerActivityPocsT mCancerActivityPocsT = matchCancerActivityCode(mCancerActivityPocsTSet, mCancerActivityCode);
               System.out.println("**** passed step 3 ****");

		       Iterator mIterator = mCancerActivityPdsTSet.iterator();
		       while (mIterator.hasNext() ){
				   CancerActivityPdsT mCancerActivityPdsT = (CancerActivityPdsT) mIterator.next();
				   oNciPersonOrgRolesT = new NciPersonOrgRolesT();
				   oNciPersonOrgRolesT = mCancerActivityPdsT.getNciPersonOrgRolesT();
			       Hibernate.initialize(oNciPersonOrgRolesT);
		           //if (oNciPersonOrgRolesT.getId().longValue() == aNpeId.longValue()) {
					//   mPdMatched = true;
					//   oProgramDirectorOrgId = new Long(oNciPersonOrgRolesT.getOrgId());
        	       //    System.out.println("***** Program director match passed ****"+ oNciPersonOrgRolesT.getId() );
					//   break;
			       //}
			   }
		       //if (!mPdMatched) {
			   //    oReferalMessage = "Grant could not be assigned. The new Program Director is not assigned to cancer activity at the start date " +  mFormatter.format(mCurrDate);
				//    return false;
        	   //}

           }
           return mPdMatched;
        } catch (HibernateException ex) {
             throw SessionFactoryUtils.convertHibernateAccessException(ex);
        }
 }

  public CancerActivityPocsT matchCancerActivityCode(Set aCancerActivityPocsTSet, String aCancerActivityCode) {
     /*
      * Execute query to retrive the applCancerActivites
      *
      * @return CancerActivityPocsT  - CancerActivityPocsT with matching code
      * @param Set - Set of mCancerActivityPocsTSet to iterate
      * @param mCancerActivityCode  - the Cancer Activity Code
      */

      CancerActivityPocsT mCancerActivityPocsT = null;
      Iterator mIteratorPocs = aCancerActivityPocsTSet.iterator();
      while (mIteratorPocs.hasNext() ){
	         mCancerActivityPocsT = (CancerActivityPocsT) mIteratorPocs.next();
		     String mPocCode = mCancerActivityPocsT.getCancerActivitiesT().getCode();
		     if (mPocCode.equalsIgnoreCase(aCancerActivityCode) ) {
     		     oStartDate = mCancerActivityPocsT.getStartDate();
                 return mCancerActivityPocsT;
     	     }
	   }
	   mCancerActivityPocsT = null;
	   return mCancerActivityPocsT;
 }

 public List getApplCancerActivities(Long aApplId, Date aStartDate) throws HibernateException {
    /*
     * Execute query to retrive the applCancerActivites
     *
     * @return List  - List of applCanceractivities
     * @param aApplId - the Appl id
     * @param aStartDate  - the Start date
     */

     Object[] mQueryValues = new Object[] {aApplId, aStartDate};
     Type[] mQueryTypes = new Type[] {Hibernate.LONG, Hibernate.DATE};

	 List results = (List) session.find(
		   "from ApplCancerActivitiesT applCA where applCA.applId = ? and " +
           "applCA.endDate is null and " +
           "applCA.startDate <= ?", mQueryValues, mQueryTypes);

      if (results == null) {
           throw new HibernateException("Invalid request");
      }
      return results;
 }
 public boolean rejectReferal(Long aApplId, Long aOrgId) {
    /*
     * Reject a referal - update applProcessStatusesT
     *                    update applCancerActivitiesT
     *                    update applCancerActivityPocsT
     *                    insert applProcessStatuesT
     *
     * @return boolean - insert pass/faik
     * @param aApplId - the Appl id
     * @param aNpeId  - the person Id
     */

     oOrganizationCode = aOrgId;

     if(updateApplProcessStatusesT() ){
		if (updateApplCancerActivitiesT(aApplId) ) {
		    //if(updateApplCancerActivityPocsT(aApplId) ) {
				 if(insertApplProcessStatusesT(aApplId) ){

			        return true;
			     }
			 //}
		 }
	}

	return false;
}
 public boolean insertReferal(Long aApplId, Long aNpeId) {
    /*
     * accept a referal - insert into applicationPds
     *                     update applprocessStatusesT
     *                     update applCancerActivityPocsT
     *                     insert processStatusesT & applProcessStatusesT
     *
     * @return boolean - insert pass/faik
     * @param aApplId - the Appl id
     * @param aNpeId  - the person Id
     */

     if(insertApplicationPdsT(aApplId, aNpeId) ){
		 if (updateApplProcessStatusesT() ) {
			 if(updateApplCancerActivityPocsT(aApplId) ) {
				 if(insertProcessStatusesT(aApplId, aNpeId) ){

			        return true;
			     }
			 }
		 }
	}

	return false;

}

 public boolean insertApplicationPdsT(Long aApplId, Long aNpeId) {
    /*
     * Create a new record in application_pds_t for new PD:
     *
     * @return boolean - insert pass/faik
     * @param aApplId - the Appl id
     * @param aNpeId  - the person Id
     */
       boolean insertApplicationPdsT = false;
       ApplicationPdsT mApplicationPdsT = new ApplicationPdsT();
       mApplicationPdsT.setNpeId(aNpeId);
       mApplicationPdsT.setApplId(aApplId);
       mApplicationPdsT.setStartDate(new Date());
       mApplicationPdsT.setCreateDate(new Date());
       mApplicationPdsT.setCreateUserId("Hibernate");
       try {
          session.save(mApplicationPdsT);
       } catch (HibernateException ex) {
	         throw SessionFactoryUtils.convertHibernateAccessException(ex);
	   }
	   insertApplicationPdsT = true;
	   System.out.println ("*** passed insertApplicationPdsT step *****");
	   return insertApplicationPdsT;

 }
 public boolean updateApplProcessStatusesT() {
    /*
     * Update the ApplProcessStatusesT record
     *
     * @return boolean - insert pass/faik
     */
	   System.out.println ("*** started updateApplProcessStatusesT step *****");

       boolean updateApplProcessStatusesT = false;

	   Date yourDate = (Date) Calendar.getInstance().getTime();
	   System.out.println("****** now in  step 71 ***");

	   Timestamp convertedDate = new java.sql.Timestamp(yourDate.getTime());
	   System.out.println("****** now in  step 81 ***" + convertedDate);
	   System.out.println("****** now in  session ***" + session);
	   System.out.println("****** now in  oApplProcessStatusesT ***" + oApplProcessStatusesT);

       oApplProcessStatusesT.setEndDate(convertedDate);
       try {
          session.update(oApplProcessStatusesT);
                 oNciApplElementsT = oApplProcessStatusesT.getNciApplElementsT();
		         Hibernate.initialize(oNciApplElementsT);

       } catch (Exception ex) {
		     System.out.println("****** updateApplProcessStatusesT exception is ***" + ex.toString());
	         HibernateException ex1 =  new HibernateException(ex.toString());
	         throw SessionFactoryUtils.convertHibernateAccessException(ex1);
	   }

	   updateApplProcessStatusesT = true;
	   System.out.println ("*** passed updateApplProcessStatusesT step *****");

	   return updateApplProcessStatusesT;

 }
 public boolean updateApplCancerActivitiesT(Long aApplId) {
    /*
     * Update the updateApplCancerActivitiesT record
     *
     * @param aApplId - the Appl id
     * @return boolean - insert pass/faik
     */

    boolean updateApplCancerActivitiesT = false;
    ApplCancerActivitiesT mApplCancerActivitiesT = null;
    try {
    	List results = getApplCancerActivities(aApplId, new Date());
    	// find all applCancerActivities for this applId
        if (results.size() > 0) {
    		//get the cancer activity record
    		mApplCancerActivitiesT = (ApplCancerActivitiesT) results.get(0);
    		oCancerActivityT  = mApplCancerActivitiesT.getCancerActivitiesT();
            mApplCancerActivitiesT.setEndDate(new Date());
	    }
	    session.update(mApplCancerActivitiesT);
    } catch (Exception ex) {
	     System.out.println("****** updateApplCancerActivitiesT exception is ***" + ex.toString());
	     HibernateException ex1 =  new HibernateException(ex.toString());
	     throw SessionFactoryUtils.convertHibernateAccessException(ex1);
	}

	updateApplCancerActivitiesT = true;
	return updateApplCancerActivitiesT;
 }


 public boolean updateApplCancerActivityPocsT(Long aApplId) {
    /*
     * Update the updateApplCancerActivityPocsT record
     *
     * @param aApplId - the Appl id
     * @return boolean - insert pass/faik
     */
	   System.out.println ("*** started updateApplCancerActivityPocsT step *****");
       String mCode = "MB";
       boolean updateApplCancerActivityPocsT = false;
       ApplCancerActivityPocsT mApplCancerActivityPocsT = new ApplCancerActivityPocsT();
       //mApplCancerActivityPocsT.setNciApplElementsT(oNciApplElementsT);
	   //Date yourDate = (Date) Calendar.getInstance().getTime();
	   //Timestamp convertedDate = new java.sql.Timestamp(yourDate.getTime());
       //mApplCancerActivityPocsT.setEndDate(convertedDate);
	   //mApplCancerActivityPocsT.setStartDate(oStartDate);
	   // update ApplCancerActivityPocsT for this applId
	   List results = new ArrayList();
       try {
		     results = session.find("from CancerActivityPocsT xxx where xxx.cancerActivitiesT.code = ?", mCode, Hibernate.STRING);
		     //session.update(mApplCancerActivityPocsT);
		     CancerActivityPocsT mCancerActivityPocsT = (CancerActivityPocsT) results.get(0);
		     Set applCancerActivityPocsTs = mCancerActivityPocsT.getApplCancerActivityPocsTs();
             Hibernate.initialize(applCancerActivityPocsTs);
             mApplCancerActivityPocsT = (ApplCancerActivityPocsT) results.get(0);
       } catch (Exception ex) {
		     System.out.println("****** updateApplCancerActivityPocsT exception is ***" + ex.toString());
	         HibernateException ex1 =  new HibernateException(ex.toString());
	         throw SessionFactoryUtils.convertHibernateAccessException(ex1);
	   }
	   updateApplCancerActivityPocsT = true;
	   System.out.println ("*** passed updateApplCancerActivityPocsT step *****" + results.size());

	   return updateApplCancerActivityPocsT;

 }

 public boolean insertApplProcessStatusesT(Long aApplId) {
    /*
     * Create a new record in ApplProcecessStatutsesT for reject action:
     *
     * @return boolean - insert pass/faik
     * @param aApplId - the Appl id
     */
       boolean mInsertApplProcessStatusesT = false;

       //get the processStatusesT record
       ProcessStatusesT mProcessStatusesT = oApplProcessStatusesT.getProcessStatusesT();
       ApplProcessStatusesT mApplProcessStatusesT = new ApplProcessStatusesT();

       oNciApplElementsT = oApplProcessStatusesT.getNciApplElementsT();
       oNciPersonOrgRolesT = oApplProcessStatusesT.getNciPersonOrgRolesT();

       mApplProcessStatusesT.setNonId(oProgramDirectorOrgId);
       mApplProcessStatusesT.setBeginDate(new Date());
       mApplProcessStatusesT.setCreateUserId("HIBERNATE");
       mApplProcessStatusesT.setCreateDate( new Date() );
       mApplProcessStatusesT.setLastChangeDate(new Date());
       mApplProcessStatusesT.setLastChangeUserId("HIBERNATE");
       mApplProcessStatusesT.setUpdateStamp(new Integer("1"));
       mApplProcessStatusesT.setComments("Hibernate test");
       mApplProcessStatusesT.setNciApplElementsT(oNciApplElementsT);
       mApplProcessStatusesT.setProcessStatusesT(mProcessStatusesT);
       mApplProcessStatusesT.getProcessStatusesT().setCode("REJ");
       mApplProcessStatusesT.setNciPersonOrgRolesT(oNciPersonOrgRolesT);

       try{
           session.save(mApplProcessStatusesT);
           session.flush();
           session.close();
       } catch (Exception ex) {
		     System.out.println("****** InsertApplProcessStatusesT exception is ***" + ex.toString());
	         HibernateException ex1 =  new HibernateException(ex.toString());
	         throw SessionFactoryUtils.convertHibernateAccessException(ex1);
	   }
	   mInsertApplProcessStatusesT = true;
	   System.out.println ("*** passed InsertApplProcessStatusesT step *****");

	   return mInsertApplProcessStatusesT;

 }

 public boolean insertProcessStatusesT(Long aApplId, Long aNpeId) {
    /*
     * Create a new record in ProcecessStatutsesT for new PD:
     *
     * @return boolean - insert pass/faik
     * @param aApplId - the Appl id
     * @param aNpeId  - the person Id
     */
       boolean insertProcessStatusesT = false;
       ProcessStatusesT mProcessStatusesT = new ProcessStatusesT();
       ApplProcessStatusesT mApplProcessStatusesT = new ApplProcessStatusesT();


       mProcessStatusesT.setNonId(oProgramDirectorOrgId);
       mProcessStatusesT.setCode("PDACC");
       mProcessStatusesT.setCode("PDACC");
       mProcessStatusesT.setCreateUserId("HIBERNATE");
       mProcessStatusesT.setCreateDate( new Date() );
       mProcessStatusesT.setLastChangeUserId("HIBERNATE");
       mProcessStatusesT.setLastChangeDate(new Date());
       mProcessStatusesT.setUpdateStamp(new Integer("1"));

       mApplProcessStatusesT.setNonId(oProgramDirectorOrgId);
       mApplProcessStatusesT.setBeginDate(new Date());
       mApplProcessStatusesT.setCreateUserId("HIBERNATE");
       mApplProcessStatusesT.setCreateDate( new Date() );
       mApplProcessStatusesT.setLastChangeDate(new Date());
       mApplProcessStatusesT.setLastChangeUserId("HIBERNATE");
       mApplProcessStatusesT.setUpdateStamp(new Integer("1"));
       mApplProcessStatusesT.setComments("Hibernate test");
       mApplProcessStatusesT.setNciApplElementsT(oNciApplElementsT);
       mApplProcessStatusesT.setProcessStatusesT(mProcessStatusesT);
       mApplProcessStatusesT.setNciPersonOrgRolesT(oNciPersonOrgRolesT);


       HashSet mApplProcessStatusesSet = new HashSet();
       try{
          mApplProcessStatusesSet.add(mApplProcessStatusesT);
           //mProcessStatusesT.setApplProcessStatusesTs(mApplProcessStatusesSet);
           session.save(mProcessStatusesT);
           session.save(mApplProcessStatusesT);
           session.flush();
           session.close();
       } catch (Exception ex) {
		     System.out.println("****** insertProcessStatusesT exception is ***" + ex.toString());
	         HibernateException ex1 =  new HibernateException(ex.toString());
	         throw SessionFactoryUtils.convertHibernateAccessException(ex1);
	   }
	   insertProcessStatusesT = true;
	   System.out.println ("*** passed insertProcessStatusesT step *****");

	   return insertProcessStatusesT;

 }

 public String getReferalMessage() {
    /*
     *
     * @return String - oReferalMessage
     */
       return oReferalMessage;
     }
}